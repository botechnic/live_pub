<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   minWidth="500" minHeight="350" creationComplete="init()">

	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>

	<fx:Script>
		<![CDATA[
			import flash.events.StatusEvent;
			import flash.media.SoundTransform;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import flash.external.*;
			import flash.utils.Timer;
			import flash.events.TimerEvent;
			
			private var isRecording:Boolean;
			private var streamer:String;
			private var file:String;
			private var publishType:String;
			private var onStopRecord:String;
			private var onError:String;
			private var labelRecord:String;
			private var labelStop:String;
			private var camera:Camera;
			private var microphone:Microphone;
			private var connection:NetConnection;
			private var stream:NetStream;
			private var h264Settings:H264VideoStreamSettings;
			private var _timer:Timer;
			
			
			private function toggleFeedListener(event:MouseEvent):void {
				var f3:String = "testerror";
				var m3:String = ExternalInterface.call(f3, "btn_mic");
				//trace(m3);
				/*if (!isRecording) {
					isRecording = true;
					toggleFeed.label = labelStop;
					stream.publish(file, publishType);
					//videoDisplay.attachCamera(camera);
				} else {
					isRecording = false;
                    //callWrapper();
					toggleFeed.label = labelRecord;					
					stream.close();
					//videoDisplay.attachCamera(null);
				}*/
			}
            public function callWrapper():void {
                var s:String;
                if (ExternalInterface.available) {
                   var wrapperFunction:String = onStopRecord;
                   s = ExternalInterface.call(wrapperFunction,"ok");
                } else {
                   s = "Wrapper not available";
                }
            }
            public function callOnError(message:String):void {
                var s:String;
                if (ExternalInterface.available) {
                   var wrapperFunction:String = onError;
                   s = ExternalInterface.call(wrapperFunction, message);
                } else {
                   s = "Wrapper not available";
                }
            }
			private function initListeners():void {
				//toggleFeed.addEventListener(MouseEvent.CLICK, toggleFeedListener);
				ExternalInterface.addCallback("test_echo", jsTestEcho);
				ExternalInterface.addCallback("set_volume", setVolume);
			}
			private function netStatusHander(event:NetStatusEvent):void {
				switch(event.info.code) {
					case 'NetConnection.Connect.Success':
						stream = new NetStream(connection);						
						stream.attachAudio(microphone);
						//stream.attachCamera(camera);
						//h264Settings = new H264VideoStreamSettings();
						//h264Settings.setProfileLevel(H264Profile.BASELINE, H264Level.LEVEL_1_2);
						//h264Settings.setKeyFrameInterval(1);
						//stream.videoStreamSettings = h264Settings;
						//stream.bufferTimeMax = 30;
						//stream.bufferTime = 10;
						stream.publish(file, publishType);
						break;
				}
			}
			private function init():void {
				isRecording = false;
				streamer = FlexGlobals.topLevelApplication.parameters.streamer;
				file = FlexGlobals.topLevelApplication.parameters.file;
				publishType = FlexGlobals.topLevelApplication.parameters.publishType;
                onStopRecord = FlexGlobals.topLevelApplication.parameters.onStopRecord;
                onError = FlexGlobals.topLevelApplication.parameters.onError;
                labelRecord = FlexGlobals.topLevelApplication.parameters.labelRecord;
                labelStop = FlexGlobals.topLevelApplication.parameters.labelStop;
				if (file == null) {
					Alert.show('Missing flashvars: file');
					return;
				}
				if (streamer == null) {
					Alert.show('Missing flashvars: streamer');
					return;
				}
				if (publishType == null) { publishType = 'record'; }
				if (labelRecord == null) { labelRecord = 'Record'; }
				if (labelStop == null) { labelStop = 'Stop'; }
				initListeners();
				/*camera = Camera.getCamera();
                if (camera == null) {
                    callOnError("no camera");
                    toggleFeed.label = "no camera";
                    return;
                }
                camera.addEventListener(StatusEvent.STATUS, camStatusHandler);
				camera.setMode(640, 480, 20);				
				camera.setQuality(0, 90);*/
				microphone = Microphone.getMicrophone();
				//callOnError("test_mic");
				var f:String = "testerror";
				var m:String = ExternalInterface.call(f, "test_mic");
				trace(m);
				if (microphone == null) {
					callOnError("no_mic");
					return;
				}

				microphone.addEventListener(StatusEvent.STATUS, micStatusHandler);
				microphone.encodeQuality = 9;
				microphone.rate = 44;
			//	microphone.framesPerPacket = 1;
                microphone.setSilenceLevel(0);
				connection = new NetConnection();
				connection.connect(streamer);
				connection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHander);
				//videoDisplay.attachCamera(camera);
				//toggleFeed.label = labelRecord;
			}
			
			private function micStatusHandler(event:StatusEvent):void {
				var wrapperFunction:String = onError;
				ExternalInterface.call("testerror", wrapperFunction);
				if (event.code == "Microphone.Muted") { // denied
					//ExternalInterface.call("testerror", "user_denied_mic");
					//var f1:String = "testerror";
					//var m1:String = ExternalInterface.call(f1, "user_denied_mic");
					//trace(m1);
					callOnError("user_denied_mic");
					//Security.showSettings(SecurityPanel.PRIVACY);
				} else if (event.code == "Microphone.Unmuted") { // access
					//ExternalInterface.call("testerror", "user_access_mic");
					//var f2:String = "testerror";
					//var m2:String = ExternalInterface.call(f2, "user_access_mic");
					//trace(m2);
					callOnError("user_access_mic");
					
					microphone.setLoopBack(false);
					_timer = new Timer(100);
					_timer.addEventListener(TimerEvent.TIMER, timerHandler);
					_timer.start();
				}
			}
			
			private function timerHandler(e:TimerEvent):void {
				if (microphone != null) {
					ExternalInterface.call('onActivityLevel', microphone.activityLevel);
					//callOnError("当前麦克风音量：" + microphone.activityLevel);
				}
			}
				
            private function camStatusHandler(event:StatusEvent):void {
                if (event.code == "Camera.Unmuted") {
                }
                if (event.code == "Camera.Muted") {
                    callOnError("camera denied");
                    //toggleFeed.label = "camera denied";
                }
            }
			
			private function jsTestEcho(msg:String):void {
				callOnError("as:" + msg);
			}			
			
			private function setVolume(volumeChange:Number):void
			{
				var transform:SoundTransform = microphone.soundTransform;
				transform.volume = Math.max(0, Math.min(1, volumeChange));
				microphone.soundTransform = transform;
			}
			
		]]>
	</fx:Script>
	<!-- TODO: Should we add layout? 
	<mx:VideoDisplay width="100%" height="100%" id="videoDisplay"></mx:VideoDisplay> 
	<s:Button label="Record" id="toggleFeed"></s:Button> -->
</s:Application>